#user  nobody;
#Defines which Linux system user will own and run the Nginx server

worker_processes  1;
#Referes to single threaded process. Generally set to be equal to the number of CPUs or cores.

#error_log  logs/error.log; #error_log  logs/error.log  notice;
#Specifies the file where server logs.

#pid        logs/nginx.pid;
#nginx will write its master process ID(PID).

events {
    worker_connections  1024;
    # worker_processes and worker_connections allows you to calculate maxclients value:
    # max_clients = worker_processes * worker_connections
}


http {
    include       mime.types;
    # anything written in /opt/nginx/conf/mime.types is interpreted as if written inside the http { } block

    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    # If serving locally stored static files, sendfile is essential to speed up the server,
    # But if using as reverse proxy one can deactivate it

    #tcp_nopush     on;
    # works opposite to tcp_nodelay. Instead of optimizing delays, it optimizes the amount of data sent at once.

    #keepalive_timeout  0;
    keepalive_timeout  65;
    # timeout during which a keep-alive client connection will stay open.

    gzip  on;
    # tells the server to use on-the-fly gzip compression.

    upstream prerender-server {
        server service.prerender.io max_fails=2 fail_timeout=15s;
    }

    upstream API {
        server stlcourts-api:8080;
    }

    server {
        listen 80;
        #listen 443 ssl;
        # force https-redirects
        #if ($scheme = http) {
        #  return 301 https://$server_name$request_uri;
        #}

        #ssl    on;
        #ssl_certificate /var/local/nginx/ssl/certs/__yourstlcourts_com.crt;
        #ssl_certificate_key  /var/local/nginx/ssl/keys/server.key;

        server_name yourstlcourts.com;
        root /usr/share/nginx/html;
        index index.html;

        location /api {
            proxy_pass http://API;
            #proxy_pass https://API;
        }

        location / {
            # Make sure to pass any headers through the proxy here and not inside the if statements !
            proxy_set_header Host $host;
            proxy_set_header Accept-Encoding "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Prerender-Token Uc0oODEz55JlZcywLMX3;

            # Defining a variable that will be used to process normal or crawler requests separately
            set $prerender 0;

            if ($http_user_agent ~* "googlebot|baiduspider|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
                set $prerender 1;
            }

            if ($args ~ "_escaped_fragment_") {
                set $prerender 1;
            }

            if ($http_user_agent ~ "Prerender") {
                set $prerender 0;
            }

            # Allow normal processing without prerender or rewrite
            if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
                set $prerender 2;
            }

            if ($prerender = 1) {
                # when a crawler asks for a page proxy the request to the prerender host
                rewrite .* /$scheme://$host$request_uri? break;
                proxy_pass http://prerender-server;
            }

            if ($prerender = 0) {
                rewrite .* /index.html break;
            }
        }
    }
}
